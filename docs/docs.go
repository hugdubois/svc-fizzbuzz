// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/fizzbuzz": {
            "get": {
                "description": "Returns a list of strings with numbers from 1 to ` + "`" + `limit` + "`" + `, where:\nall multiples of ` + "`" + `int1` + "`" + ` are replaced by ` + "`" + `str1` + "`" + `,\nall multiples of ` + "`" + `int2` + "`" + ` are replaced by ` + "`" + `str2` + "`" + `,\nall multiples of ` + "`" + `int1` + "`" + ` and ` + "`" + `int2` + "`" + ` are replaced by ` + "`" + `str1str2` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "summary": "fizzbuzz computation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "fizzbuzz from 1 to limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "multiples replaced 1",
                        "name": "int1",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "replacement string 1",
                        "name": "str1",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "multiples replaced 2",
                        "name": "int2",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "replacement string 2",
                        "name": "str2",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.FizzBuzzResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/service.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/service.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/fizzbuzz/top": {
            "get": {
                "description": "Returns usage statistics of the /api/v1/fizzbuzz endpoint.\nIt allows the users to know what the number of hits of that endpoint.\nAnd returns the parameters corresponding to it.",
                "produces": [
                    "application/json"
                ],
                "summary": "Most used /api/v1/fizzbuzz request usage statistics.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.FizzBuzzTopResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/service.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "returns the service status",
                "produces": [
                    "application/json"
                ],
                "summary": "service status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.StatusResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/service.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Returns the service version",
                "produces": [
                    "application/json"
                ],
                "summary": "Service version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.Service"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/service.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "core.FizzBuzzParams": {
            "type": "object",
            "properties": {
                "int1": {
                    "description": "all multiples of [Int1] are replaced by [Str1] (classic fizzbuzz: 3)",
                    "type": "integer"
                },
                "int2": {
                    "description": "all multiples of [Int2] are replaced by [Str2] (classic fizzbuzz: 5)",
                    "type": "integer"
                },
                "limit": {
                    "description": "limit of the loop",
                    "type": "integer"
                },
                "str1": {
                    "description": "replacement string for multiples of Int1 (classic fizzbuzz: \"fizz\")",
                    "type": "string"
                },
                "str2": {
                    "description": "replacement string for multiples of [Int2] (classic fizzbuzz: \"buzz\")",
                    "type": "string"
                }
            }
        },
        "service.ErrorMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "service.FizzBuzzResponse": {
            "type": "object",
            "properties": {
                "fizzbuzz": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "service.FizzBuzzTopResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/service.FizzBuzzTopResponseData"
                }
            }
        },
        "service.FizzBuzzTopResponseData": {
            "type": "object",
            "properties": {
                "count_request": {
                    "type": "integer"
                },
                "params": {
                    "$ref": "#/definitions/core.FizzBuzzParams"
                }
            }
        },
        "service.Service": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.StatusResponse": {
            "type": "object",
            "properties": {
                "store-alive": {
                    "type": "boolean"
                },
                "svc-alive": {
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
